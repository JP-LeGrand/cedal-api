// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cedal_backend.Data;

namespace cedal_backend.Migrations
{
    [DbContext(typeof(CedalContext))]
    partial class CedalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("cedal_backend.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Province");

                    b.Property<string>("Street");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("cedal_backend.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("ApplicantId");

                    b.Property<int>("EducationType");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("cedal_backend.Models.Event", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Description");

                    b.Property<int?>("EventAddressId");

                    b.Property<string>("EventDamage");

                    b.Property<string>("EventImage");

                    b.Property<int>("EventType");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("EventAddressId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("cedal_backend.Models.Languages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("ApplicantId");

                    b.Property<int>("LanguageType");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("cedal_backend.Models.Subjects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("ApplicantId");

                    b.Property<int>("SchoolSubjects");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("cedal_backend.Models.User", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactNumber");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("IdNumber");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.Property<int?>("UserType");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("cedal_backend.Models.WeekDays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("ApplicantId");

                    b.Property<int>("DaysOfTheWeek");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.ToTable("WeekDays");
                });

            modelBuilder.Entity("cedal_backend.Models.Applicant", b =>
                {
                    b.HasBaseType("cedal_backend.Models.User");

                    b.Property<int?>("AddressId");

                    b.Property<int?>("Availability");

                    b.Property<Guid?>("ContactPersonId");

                    b.Property<string>("DescriptionOfTrainingExperience");

                    b.Property<bool?>("Disabilities");

                    b.Property<string>("DisabilityDetails");

                    b.Property<bool?>("DriverLicence");

                    b.Property<string>("EducationDescription");

                    b.Property<int?>("EmploymentStatus");

                    b.Property<string>("Hobbies");

                    b.Property<string>("IdentificationDocument");

                    b.Property<int?>("MaritalStatus");

                    b.Property<string>("NameOfInstitution");

                    b.Property<string>("OtherMeansOfHelp");

                    b.Property<string>("OtherPreference");

                    b.Property<bool?>("OwnCar");

                    b.Property<string>("ReasonOfVolunteering");

                    b.Property<string>("RefEmail");

                    b.Property<string>("RefName");

                    b.Property<string>("RefNumber");

                    b.Property<string>("RefOccupation");

                    b.Property<int?>("TimePreferences");

                    b.Property<bool?>("VolunteeringExperience");

                    b.Property<string>("WorkExperience");

                    b.HasIndex("AddressId");

                    b.HasIndex("ContactPersonId");

                    b.HasDiscriminator().HasValue("Applicant");
                });

            modelBuilder.Entity("cedal_backend.Models.Education", b =>
                {
                    b.HasOne("cedal_backend.Models.Applicant")
                        .WithMany("EducationPreference")
                        .HasForeignKey("ApplicantId");
                });

            modelBuilder.Entity("cedal_backend.Models.Event", b =>
                {
                    b.HasOne("cedal_backend.Models.Address", "EventAddress")
                        .WithMany()
                        .HasForeignKey("EventAddressId");
                });

            modelBuilder.Entity("cedal_backend.Models.Languages", b =>
                {
                    b.HasOne("cedal_backend.Models.Applicant")
                        .WithMany("Languages")
                        .HasForeignKey("ApplicantId");
                });

            modelBuilder.Entity("cedal_backend.Models.Subjects", b =>
                {
                    b.HasOne("cedal_backend.Models.Applicant")
                        .WithMany("SubjectsToTeach")
                        .HasForeignKey("ApplicantId");
                });

            modelBuilder.Entity("cedal_backend.Models.WeekDays", b =>
                {
                    b.HasOne("cedal_backend.Models.Applicant")
                        .WithMany("DaysAvailable")
                        .HasForeignKey("ApplicantId");
                });

            modelBuilder.Entity("cedal_backend.Models.Applicant", b =>
                {
                    b.HasOne("cedal_backend.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("cedal_backend.Models.User", "ContactPerson")
                        .WithMany()
                        .HasForeignKey("ContactPersonId");
                });
#pragma warning restore 612, 618
        }
    }
}
